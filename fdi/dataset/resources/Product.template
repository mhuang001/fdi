# -*- coding: utf-8 -*-

$WARNING

$IMPORTS

import logging
# create logger
logger = logging.getLogger(__name__)
# logger.debug('level %d' %  (logger.getEffectiveLevel()))


class $PRODUCTNAME($PARENT):
    """ $CLASSDOC

    Generally a Product (inheriting BaseProduct) has project-wide attributes and can be extended to define a plethora of specialized products.
    """

$PROJECTINFO

    def __init__(self,
$INITARGS
                 **kwds):
        """ Initializes instances with more metadata as attributes, set to default values.

        Put description keyword argument here to allow 'BaseProduct("foo") and description='foo'
        """

        if 'metasToBeInstalled' not in kwds:
            # this class is being called directly

            # list of local variables.
            lvar = locals()
            lvar.pop('self')
            lvar.pop('__class__')
            lvar.pop('kwds')
            metasToBeInstalled = lvar
        else:
            # This class is being called probably from super() in a subclass
            metasToBeInstalled = kwds['metasToBeInstalled']
            del kwds['metasToBeInstalled']


# must be the first line to initiate meta and get description
        super($PRODUCTNAME , self).__init__(
            metasToBeInstalled=metasToBeInstalled, **kwds)

        #self.installMetas(lvar=lvar)
        #print('% ' + self.meta.toString())
