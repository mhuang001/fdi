# -*- coding: utf-8 -*-

$WARNING

$IMPORTS

from fdi.dataset.readonlydict import ReadOnlyDict
from fdi.dataset.serializable import Serializable
from fdi.dataset.abstractcomposite import AbstractComposite
from fdi.dataset.listener import EventSender, EventType
from fdi.dataset.eq import deepcmp
from fdi.dataset.copyable import Copyable
from fdi.dataset.history import History

import copy
from functools import lru_cache
from collections import OrderedDict

import logging
# create logger
logger = logging.getLogger(__name__)


class $PRODUCTNAME($PARENTS AbstractComposite, Copyable, Serializable,  EventSender):
    """ A BaseProduct is a generic result that can be passed on between
    (standalone) processes.

    In general a Product contains zero or more datasets, history,
    optional metadata as well as some required metadata fields.
    Its intent is that it can fully describe itself; this includes
    the way how this product was achieved (its history). As it is
    the result of a process, it should be able to save to and restore
    from an Archive device.

    Many times a Product may contain a single dataset and for this
    purpose the first dataset entry can be accessed by the getDefault()
    method. Note that the datasets may be a composite of datasets
    by themselves.

    mh: Built-in Attributes in productInfo['metadata'] can be accessed with e.g. p.creator
    or p.meta['description'].value:
    p.creator='foo'
    assert p.creatur=='foo'
    assert p.meta['creator']=='foo'
    p.meta['creator']=Parameter('bar')
    assert p.meta['creator']==Parameter('bar')

    $CLASSDOC

    """

    def __init__(self,
$INITARGS
                 zInfo=None,
                 **kwds):

        # collect MDPs from args-turned-local-variables.
        metasToBeInstalled = copy.copy(locals())
        for x in ('self', '__class__', 'zInfo', 'kwds'):
            metasToBeInstalled.pop(x)

        global ProductInfo
        if zInfo is None:
            zInfo = ProductInfo

        # must be the first line to initiate meta and zInfo
        # :class: `Attributable` will process MDPs
        super().__init__(zInfo=zInfo, **metasToBeInstalled, **kwds)

        self._history = History()


    @property
    def history(self):
        """ xx must be a property for ``self.xx = yy`` to work in super class after xx is set as a property also by a subclass.
        """
        return self._history

    @history.setter
    def history(self, history):
        self._history = history

    def accept(self, visitor):
        """ Hook for adding functionality to meta data object
        through visitor pattern."""
        visitor.visit(self)

    def getDefault(self):
        """ Convenience method that returns the first dataset \
        belonging to this product. """
        return list(self._sets.values())[0] if len(self._sets) > 0 else None



    def targetChanged(self, event):
        pass
        if event.source == self.meta:
            if event.type_ == EventType.PARAMETER_ADDED or \
               event.type_ == EventType.PARAMETER_CHANGED:
                # logger.debug(event.source.__class__.__name__ +   ' ' + str(event.change))
                pass

    def toString(self, level=0,
                 tablefmt='rst', tablefmt1='simple', tablefmt2='simple',
                 matprint=None, trans=True, beforedata='', **kwds):
        """ like AbstractComposite but with history
        """
        h = self.history.toString(
            level=level,
            tablefmt=tablefmt, tablefmt1=tablefmt1, tablefmt2=tablefmt2,
	    matprint=matprint, trans=trans, **kwds)
        s = super(BaseProduct, self).toString(
            level=level,
            tablefmt=tablefmt, tablefmt1=tablefmt1, tablefmt2=tablefmt2,
	    matprint=matprint, trans=trans, beforedata=h, **kwds)
        return s


    def __getstate__(self):
        """ Can be encoded with serializableEncoder """
        if 0:
            # remove self from meta's listeners because the deserialzed product will add itself during instanciation.
            print('1###' + self.meta.toString())
            metac = self.meta.copy()
            print('***' + metac.toString())
            print(deepcmp(self, metac.listeners[0]))
            metac.removeListener(self)

        ls = [
            ("meta", self.meta),
            ("_sets", self._sets if hasattr(self, '_sets') else None),
            ("history", self._history if hasattr(self, '_history') else None),
            ("listeners", self._listeners if hasattr(self, '_history') else None),
            ("_STID", self._STID if hasattr(self, '_STID') else None),
        ]

        return OrderedDict(ls)

$PROPERTIES

$PRODUCTINFO

ProductInfo = ReadOnlyDict(_Model_Spec)

MdpInfo = ProductInfo['metadata']

